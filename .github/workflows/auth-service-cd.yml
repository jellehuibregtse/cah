name: Auth Service CD

on:
  push:
    branches:
      - main
    paths:
      - auth-service/**

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11
      - name: Maven Package
        working-directory: ./auth-service
        run: mvn -B clean package -DskipTests
      - name: Maven Verify
        working-directory: ./auth-service
        run: mvn -B clean verify
  
  sonar:
    name: SonarCloud Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v3.0.10
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3.0.10
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        working-directory: ./auth-service
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_AUTH_SERVICE }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
          
  docker:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    needs: [build, sonar]
    env:
      REPO: ${{ secrets.DOCKER_REPO_AUTH_SERVICE }}

    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Build Docker image
        working-directory: ./auth-service
        run: docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
      - name: Publish Docker image
        run: docker push $REPO
    
  update:
      name: Update service using webhooks
      runs-on: ubuntu-latest
      needs: [docker]

      steps:
        - name: Run curl POST request
          run: curl -X POST ${{ secrets.WEBHOOK_AUTH_SERVICE }}